USE java.util.HashMap
USE java.util.ArrayList
REM /**
REM  * An event which is fired when the toast is opened or closed.
REM  *
REM  * @author Hyyan Abo Fakher
REM  */
CLASS public BBjToastEvent

  FIELD private BBjToast Toast!
  rem /** Disable the default constructor */
  METHOD private BBjToastEvent()
  METHODEND
  rem /**
  rem  * Construct a new BBjToastEvent
  rem  *
  rem  * @param toast! The instance of the BBjToast object
  rem  */
  METHOD public BBjToastEvent(BBjToast toast!)
    #Toast! = toast!
  METHODEND
  rem /**
  rem  * {@inheritDoc}
  rem  */
  METHOD public BBjToast getToast()
    METHODRET #Toast!
  METHODEND
  REM /**
  REM  * Alias for `BBjToastEvent.getToast()`
  REM  *
  REM  * @return The control instance
  REM  */
  METHOD public BBjToast getControl()
    METHODRET #getToast()
  METHODEND

classend
REM /**
REM  * BBjToast
REM  *
REM  * A Toast is a subtle notification commonly used in modern applications.
REM  * It can be used to provide feedback about an operation OR to display a system message.
REM  *
REM  * @author Hyyan Abo Fakher
REM  */
CLASS public BBjToast
  REM /**
  REM  * A constant which refers to the toast `top-left` position.
  REM  */
  FIELD public static BBjNumber PLACEMENT_TOP_LEFT = 2
  REM /**
  REM  * A constant which refers to the toast `top` position.
  REM  */
  FIELD public static BBjNumber PLACEMENT_TOP = 4
  REM /**
  REM  * A constant which refers to the toast `top-right` position.
  REM  */
  FIELD public static BBjNumber PLACEMENT_TOP_RIGHT = 8
  REM /**
  REM  * A constant which refers to the toast `bottom-left` position.
  REM  */
  FIELD public static BBjNumber PLACEMENT_BOTTOM_LEFT = 16
  REM /**
  REM  * A constant which refers to the toast `bottom` position.
  REM  */
  FIELD public static BBjNumber PLACEMENT_BOTTOM = 32
  REM /**
  REM  * A constant which refers to the toast `bottom-right` position.
  REM  */
  FIELD public static BBjNumber PLACEMENT_BOTTOM_RIGHT = 64
  REM /**
  REM  * A constant which refers to the toast `center` position.
  REM  */
  FIELD public static BBjNumber PLACEMENT_CENTER = 128
  REM /**
  REM  * A constant which refers to the toast `default` theme.
  REM  */
  FIELD public static BBjNumber THEME_DEFAULT = 2
  REM /**
  REM  * A constant which refers to the toast `primary` theme.
  REM  */
  FIELD public static BBjNumber THEME_PRIMARY = 4
  REM /**
  REM  * A constant which refers to the toast `success` theme.
  REM  */
  FIELD public static BBjNumber THEME_SUCCESS = 8
  REM /**
  REM  * A constant which refers to the toast `warning` theme.
  REM  */
  FIELD public static BBjNumber THEME_WARNING = 16
  REM /**
  REM  * A constant which refers to the toast `danger` theme.
  REM  */
  FIELD public static BBjNumber THEME_DANGER = 32
  REM /**
  REM  * A constant which refers to the toast `info` theme.
  REM  */
  FIELD public static BBjNumber THEME_INFO = 64
  REM /**
  REM  * A constant which refers to the toast `gray` theme.
  REM  */
  FIELD public static BBjNumber THEME_GRAY = 128
  REM /**
  REM  * A constant which refers to the toast `opened` event.
  REM  */
  FIELD public static BBjNumber ON_OPENED = 2
  REM /**
  REM  * A constant which refers to the toast `closed` event.
  REM  */
  FIELD public static BBjNumber ON_CLOSED = 4
  REM /**
  REM  * A constant which refers to the CLOSE button's action.
  REM  */
  FIELD public static BBjNumber ACTION_CLOSE = 2
  REM /**
  REM  * The duration in milliseconds to show the toast.
  REM  * After that this time is elapsed , the toast will be hidden automatically.
  REM  * IF the duration number is negative the toast will never CLOSE automatically
  REM  */
  FIELD public BBjNumber Duration! = 3000
  REM /**
  REM  * The toast's placement.
  REM  */
  FIELD public BBjNumber Placement! = BBjToast.PLACEMENT_BOTTOM
  REM /**
  REM  * The toast's theme.
  REM  */
  FIELD public BBjNumber Theme! = BBjToast.THEME_DEFAULT
  REM /**
  REM  * The toast's message. HTML is supported in the message
  REM  */
  FIELD public BBjString Message! = ""
  REM /**
  REM  * When true , THEN the toast will have the "close" button added
  REM  */
  FIELD public BBjNumber Closeable! = 0
  REM /**
  REM  * The toast's buttons.
  REM  */
  FIELD public HashMap Buttons! = new HashMap()
  FIELD private BBjWebComponent WebComponent!
  REM /**
  REM  * Construct new BBjToast.
  REM  *
  REM  * @param wnd! The window instance
  REM  */
  METHOD public BBjToast(BBjWindow wnd!)
    #WebComponent! = wnd!.addWebComponent("bbj-toast")
    #WebComponent!.executeAsyncScript("document.body.appendChild(component);")
    #WebComponent!.setStyle("width","")
    #WebComponent!.setStyle("height","")
    #WebComponent!.setStyle("position","")
    #WebComponent!.setTabTraversable(0)
    #WebComponent!.setFocusable(0)
    handler! = new BBjToastEventHandler(#this!)


    DECLARE AUTO BBjWebEventOptions toggleOptions!

    toggleOptions! = #WebComponent!.newEventOptions()
    toggleOptions!.setFilter("event.target.isSameNode(component)")
    #WebComponent!.setCallback("bbj-opened", handler!, "handleClientEvents", toggleOptions!)
    #WebComponent!.setCallback("bbj-closed", handler!, "handleClientEvents", toggleOptions!)

    DECLARE AUTO BBjWebEventOptions clickOptions!

    clickOptions! = #WebComponent!.newEventOptions()
    code! = "" +
:    "const target = event.target.closest('[data-action]');" +
:    "if (target) {" +
:    "  const action = target.getAttribute('data-action');" +
:    "  if (action === 'close') {" +
:    "    component.close();" +
:    "  } else {" +
:    "    const event = new CustomEvent('bbj-toast-button-event', {" +
:    "      bubbles: true," +
:    "      detail: action" +
:    "    });" +
:    "    component.dispatchEvent(event);" +
:    "  }" +
:    "}"
    clickOptions!.setCode(code!)
    #WebComponent!.setCallback("click", handler!, "handleClientEvents", clickOptions!)

    DECLARE AUTO BBjWebEventOptions toastButtonOptions!

    toastButtonOptions! = #WebComponent!.newEventOptions()
    toastButtonOptions!.addItem("name", "event.detail")
    #WebComponent!.setCallback("bbj-toast-button-event", handler!, "handleClientEvents", toastButtonOptions!)
  METHODEND
  REM /**
  REM  * Set the toast's placement.
  REM  *
  REM  * @param placement! The toast's placement
  REM  */
  METHOD public void setPlacement(BBjNumber placement!)
    #Placement! = placement!
    property! = null()
    SWITCH #Placement!
      CASE BBjToast.PLACEMENT_TOP_LEFT
        property! = "top-left"
        break
      CASE BBjToast.PLACEMENT_TOP
        property! = "top"
        break
      CASE BBjToast.PLACEMENT_TOP_RIGHT
        property! = "top-right"
        break
      CASE BBjToast.PLACEMENT_CENTER
        property! = "center"
        break
      CASE BBjToast.PLACEMENT_BOTTOM_LEFT
        property! = "bottom-left"
        break
      CASE BBjToast.PLACEMENT_BOTTOM_RIGHT
        property! = "bottom-right"
        break
      CASE default
        property! = "bottom"
        break
    SWEND

    #getWebComponent().putClientProperty("placement", property!)
  METHODEND
  REM /**
  REM  * Set the toast's theme.
  REM  *
  REM  * @param theme! The toast's theme
  REM  */
  METHOD public void setTheme(BBjNumber theme!)
    #Theme! = theme!
    property! = null()
    SWITCH #Theme!
      CASE BBjToast.THEME_PRIMARY
        property! = "primary"
        break
      CASE BBjToast.THEME_SUCCESS
        property! = "success"
        break
      CASE BBjToast.THEME_WARNING
        property! = "warning"
        break
      CASE BBjToast.THEME_DANGER
        property! = "danger"
        break
      CASE BBjToast.THEME_INFO
        property! = "info"
        break
      CASE BBjToast.THEME_GRAY
        property! = "gray"
        break
      CASE default
        property! = "default"
        break
    SWEND

    #getWebComponent().putClientProperty("theme", property!)
  METHODEND
  REM /**
  REM  * Open the toast.
  REM  *
  REM  * @param message! The toast's message to show
  REM  * @param duration! The toast's duration
  REM */
  METHOD public void open(BBjString message!, BBjNumber duration!)
    buttons! = ""
    it! = #getButtons().entrySet().iterator()
    WHILE it!.hasNext()
      next! = it!.next()
      label! = str(next!.getKey())
      action! = str(next!.getValue())

      IF(action! = str(BBjToast.ACTION_CLOSE))
        action! = "close"
      FI

      buttons! = buttons! + "<button data-action=""" + action!+""">" + label! + "</button>"
    WEND

    IF(#getCloseable() = 1)
      buttons! = buttons! + "<button data-action=""close""><bbj-icon name=""x""></bbj-icon></button>"
    FI

    #setMessage(message!)
    #setDuration(duration!)

    DECLARE AUTO BBjWebComponent toast!

    toast! = #getWebComponent()
    toast!.setHtml(buttons!)
    toast!.putClientProperty("message", #getMessage())
    toast!.putClientProperty("duration", #getDuration())
    toast!.putClientProperty("opened", BBjAPI.TRUE)
  METHODEND
  REM /**
  REM  * Open the toast.
  REM  *
  REM  * @param message! The toast's message to show
  REM */
  METHOD public void open(BBjString message!)
    #open(message!, #getDuration())
  METHODEND
  REM /**
  REM  * Open the toast.
  REM */
  METHOD public void open()
    #open(#getMessage(), #getDuration())
  METHODEND
  REM /**
  REM  * Close the toast message.
  REM  *
  REM  * @return The control instance
  REM */
  METHOD public void close()
    #getWebComponent().putClientProperty("opened", BBjAPI.FALSE)
  METHODEND
  REM /**
  REM  * Set a widget attribute.
  REM  *
  REM  * @param key! The attribute's name
  REM  * @param value! The attribute's value
  REM  */
  METHOD public void setAttribute(BBjString key!, BBjString value!)
    #getWebComponent().setAttribute(key!, value!)
  METHODEND
  REM /**
  REM  * Get a widget attribute.
  REM  *
  REM  * @param key! The attribute's name
  REM  */
  METHOD public BBjString getAttribute(BBjString key!)
    methodret #getWebComponent().getAttribute(key!)
  METHODEND
  REM /**
  REM  * Add a css class to the toast.
  REM  *
  REM  * @param class! The css class to add
  REM  */
  METHOD public void addClass(BBjString class!)
    #getWebComponent().addClass(class!)
  METHODEND
  REM /**
  REM  * Remove a css class to the toast.
  REM  *
  REM  * @param class! The css class to add
  REM  */
  METHOD public void removeClass(BBjString class!)
    #getWebComponent().removeClass(class!)
  METHODEND
  REM /**
  REM  * Set an event listener.
  REM  *
  REM  * @param event! The event
  REM  * @param callback! The event callback
  REM  */
  METHOD public void setCallback(BBjString event!, String callback!)
    BBjAPI().setCustomEventCallback(str(#this!) + str(event!), callback!)
  METHODEND
  REM /**
  REM  * Set an event listener.
  REM  *
  REM  * @param event! The event
  REM  * @param callback! The event callback
  REM  */
  METHOD public void setCallback(BBjNumber event!, String callback!)
    #setCallback(str(event!), callback!)
  METHODEND
  REM /**
  REM  * Set an event listener.
  REM  *
  REM  * @param event! The event
  REM  * @param callback! A class instance
  REM  * @param callback! The event method
  REM  */
  METHOD public void setCallback(BBjString event!, CustomObject instance!, String method!)
    BBjAPI().setCustomEventCallback(str(#this!) + str(event!), instance!, method!)
  METHODEND
  REM /**
  REM  * Set an event listener.
  REM  *
  REM  * @param event! The event
  REM  * @param callback! A class instance
  REM  * @param callback! The event method
  REM  */
  METHOD public void setCallback(BBjNumber event!, CustomObject instance!, String method!)
    #setCallback(str(event!), instance!, method!)
  METHODEND
  REM /**
  REM  * Clear the event callback.
  REM  *
  REM  * @param event! The event
  REM  * @return The control instance
  REM  */
  METHOD public void clearCallback(BBjString event!)
    BBjAPI().clearCustomEventCallback(str(#this!) + str(event!))
  METHODEND
  REM /**
  REM  * Clear the event callback.
  REM  *
  REM  * @param event! The event
  REM  * @return The control instance
  REM  */
  METHOD public void clearCallback(BBjNumber event!)
    #clearCallback(str(event!))
  METHODEND

CLASSEND
REM /**
REM  * A class which is used to handle the toast client events.
REM  *
REM  * @author Hyyan Abo Fakher
REM  */
CLASS public BBjToastEventHandler

  FIELD private BBjToast Toast!

  METHOD public BBjToastEventHandler(BBjToast toast!)
    #Toast! = toast!
  METHODEND
  REM /**
  REM  * Handle the toast client events.
  REM  *
  REM  * @param ev! The event
  REM  */
  METHOD public void handleClientEvents(BBjWebEvent ev!)
    type$ = ev!.getEventType()
    map! = ev!.getEventMap()
    payload! = new BBjToastEvent(#Toast!)
    SWITCH type$
      CASE "bbj-opened"
        BBjAPI().postPriorityCustomEvent(str(#Toast!) + str(BBjToast.ON_OPENED), payload!)
        break
      CASE "bbj-closed"
        BBjAPI().postPriorityCustomEvent(str(#Toast!) + str(BBjToast.ON_CLOSED), payload!)
        break
      CASE "bbj-toast-button-event"
        BBjAPI().postPriorityCustomEvent(str(#Toast!) + map!.get("name"), payload!)
      CASE DEFAULT
        BBjAPI().postPriorityCustomEvent(str(#Toast!) + type$, payload!)
        break
    SWEND
  METHODEND

CLASSEND
