use java.util.HashMap
use java.util.ArrayList
rem /**
rem  * BBjToastEvent
rem  *
rem  * @author Hyyan Abo Fakher
rem  */
class public BBjToastEvent

  field protected BBjToast Toast!
  rem /**
  rem  * Construct a new BBjToastEvent
  rem  *
  rem  * @param toast! The instance of the BBjToast object
  rem  */
  method public BBjToastEvent(BBjToast toast!)
    #Toast! = toast!
  methodend
  rem /**
  rem  * Get the toast instance
  rem  *
  rem  * @return BBjToast
  rem  */
  method public BBjToast getToast()
    methodret #Toast!
  methodend
  rem /**
  rem  * Alias for `BBjToastEvent.getToast()`
  rem  *
  rem  * @return BBjToast
  rem  */
  method public BBjToast getControl()
    methodret #getToast()
  methodend

classend
rem /**
rem  * BBjToast
rem  *
rem  * A Toast is a subtle notification commonly used in modern applications.
rem  * It can be used to provide feedback about an operation or to display a system message.
rem  *
rem  * @author Hyyan Abo Fakher
rem  */
class public BBjToast
  rem /**
  rem  * A constant which refers to the toast `top-left` position.
  rem  */
  field public static BBjNumber PLACEMENT_TOP_LEFT = 2
  rem /**
  rem  * A constant which refers to the toast `top` position.
  rem  */
  field public static BBjNumber PLACEMENT_TOP = 4
  rem /**
  rem  * A constant which refers to the toast `top-right` position.
  rem  */
  field public static BBjNumber PLACEMENT_TOP_RIGHT = 8
  rem /**
  rem  * A constant which refers to the toast `bottom-left` position.
  rem  */
  field public static BBjNumber PLACEMENT_BOTTOM_LEFT = 16
  rem /**
  rem  * A constant which refers to the toast `bottom` position.
  rem  */
  field public static BBjNumber PLACEMENT_BOTTOM = 32
  rem /**
  rem  * A constant which refers to the toast `bottom-right` position.
  rem  */
  field public static BBjNumber PLACEMENT_BOTTOM_RIGHT = 64
  rem /**
  rem  * A constant which refers to the toast `default` theme.
  rem  */
  field public static BBjNumber THEME_DEFAULT = 2
  rem /**
  rem  * A constant which refers to the toast `primary` theme.
  rem  */
  field public static BBjNumber THEME_PRIMARY = 4
  rem /**
  rem  * A constant which refers to the toast `success` theme.
  rem  */
  field public static BBjNumber THEME_SUCCESS = 8
  rem /**
  rem  * A constant which refers to the toast `warning` theme.
  rem  */
  field public static BBjNumber THEME_WARNING = 16
  rem /**
  rem  * A constant which refers to the toast `danger` theme.
  rem  */
  field public static BBjNumber THEME_DANGER = 32
  rem /**
  rem  * A constant which refers to the toast `info` theme.
  rem  */
  field public static BBjNumber THEME_INFO = 64
  rem /**
  rem  * A constant which refers to the toast `opened` event.
  rem  */
  field public static BBjNumber ON_OPENED = 2
  rem /**
  rem  * A constant which refers to the toast `closed` event.
  rem  */
  field public static BBjNumber ON_CLOSED = 4
  rem /**
  rem  * A constant which refers to the close button's action.
  rem  */
  field public static BBjNumber ACTION_CLOSE = 2
  rem /**
  rem  * The duration in milliseconds to show the toast.
  rem  * After that this time is elapsed , the toast will be hidden automatically.
  rem  * If the duration number is negative the toast will never close automatically
  rem  */
  field public BBjNumber Duration! = 3000
  rem /**
  rem  * The toast's placement.
  rem  */
  field public BBjNumber Placement! = BBjToast.PLACEMENT_BOTTOM
  rem /**
  rem  * The toast's theme.
  rem  */
  field public BBjNumber Theme! = BBjToast.THEME_DEFAULT
  rem /**
  rem  * The toast's message. HTML is supported in the message
  rem  */
  field public BBjString Message! = ""
  rem /**
  rem  * When true , then the toast will have the "close" button added
  rem  */
  field public BBjNumber Closeable! = 0
  rem /**
  rem  * The toast's buttons.
  rem  */
  field public HashMap Buttons! = new HashMap()
  field protected BBjChildWindow Canvas!
  field protected BBjHtmlView HTMLView!
  field protected BBjString Id! = java.util.UUID.randomUUID().toString()
  field protected BBjNumber EventProcessingStarted! = 0
  field protected BBjString CssClass! = ""
  rem /**
  rem  * Construct new BBjToast for the given BBjTopLevelWindow instance
  rem  *
  rem  * @param wnd! The window instance
  rem  * @param id! The id of the created child window
  rem  * @param cssClass! A css class selector to add to the toast client-side component 
  rem  */
  method public BBjToast(BBjWindow wnd!, BBjNumber id!, BBjString cssClass!)
    #Canvas! = wnd!.addChildWindow(id!, 0, 0, 0, 0, "", $00008000$, BBjAPI().getSysGui().getAvailableContext())
    #CssClass! = cssClass!
    #HTMLView! = #Canvas!.addHtmlView(101, 0, 0, 0, 0, "", $0000$)
    #HTMLView!.setOpaque(0)
    #HTMLView!.setNoEdge(1)
    #HTMLView!.setTabTraversable(0)
    #HTMLView!.setFocusable(0)
    #HTMLView!.setAttribute("data-htmlview-for-toast", #Id!)
  methodend
  rem /**
  rem  * Construct new BBjToast for the given BBjTopLevelWindow instance
  rem  *
  rem  * @param wnd! The window instance
  rem  * @param id! The id of the created child window
  rem  */
  method public BBjToast(BBjWindow wnd!, BBjNumber id!)
    #this!(wnd!, id!, "")
  methodend    
  rem /**
  rem  * Construct new BBjToast for the given BBjTopLevelWindow instance
  rem  *
  rem  * @param wnd! The window instance
  rem  * @param cssClass! A css class selector to add to the toast client-side component 
  rem  */
  method public BBjToast(BBjWindow wnd!, BBjString cssClass!)    
    #this!(wnd!, wnd!.getAvailableControlID(), cssClass!)
  methodend
  rem /**
  rem  * Construct new BBjToast for the given BBjTopLevelWindow instance
  rem  *
  rem  * @param wnd! The window instance
  rem  */
  method public BBjToast(BBjWindow wnd!)
    #this!(wnd!, wnd!.getAvailableControlID(), "")
  methodend    
  rem /**
  rem  * Get the unique auto generated id of the toast.
  rem  *
  rem  * @return BBjString
  rem  */
  method public BBjString getId()
    methodret #Id!
  methodend
  rem /**
  rem  * Get the css class of the component
  rem  *
  rem  * @return BBjString
  rem  */
  method public BBjString getCssClass()
    methodret #CssClass!
  methodend    
  rem /**
  rem  * Open the toast.
  rem  *
  rem  * @param message! The toast's message to show
  rem  * @param duration! The toast's duration
  rem  *
  rem  * @return BBjToast
  rem */
  method public BBjToast open(BBjString message!, BBjNumber duration!)
    id! = str(#getId())
    buttons! = ""
    it! = #getButtons().entrySet().iterator()
    while it!.hasNext()
      next! = it!.next()
      label! = str(next!.getKey())
      action! = str(next!.getValue())

      if(action! = str(BBjToast.ACTION_CLOSE))
        action! = "close"
      fi

      buttons! = buttons! + "<button data-action=""" + action!+""">" + label! + "</button>"
    wend

    if(#getCloseable() = 1)
      buttons! = buttons! + "<button data-action=""close""><bbj-icon name=""x""></bbj-icon></button>"
    fi

    #setMessage(message!)
    #setDuration(duration!)
    script! = "" +
:    "(async () => {" +
:    " await customElements.whenDefined('bbj-toast');" +
:    " await customElements.whenDefined('bbj-icon');" +
:    " const container = document.querySelector('[data-htmlview-for-toast=""" + id! + """]');" +
:    " let toast = document.querySelector('[data-toast-for=""" + id! + """]');" +
:    " if(!toast){" +
:    "  toast = document.createElement('bbj-toast');" +
:    "  toast.addEventListener('bbj-opened', ev => {"+
:    "     if(!container.basisDispatchCustomEvent) return;" +
:    "     if(!ev.target.isSameNode(toast)) return;" +
:    "     container.basisDispatchCustomEvent(container, {type:'bbj-opened', detail: ''});" +
:    "  });"+
:    "  toast.addEventListener('bbj-closed', ev => {"+
:    "     if(!container.basisDispatchCustomEvent) return;" +
:    "     if(!ev.target.isSameNode(toast)) return;" +
:    "     container.basisDispatchCustomEvent(container, {type:'bbj-closed', detail: ''});" +
:    "  });"+
:    "  toast.addEventListener('click', ev => {"+
:    "     if(!container.basisDispatchCustomEvent) return;" +
:    "     const target = ev.target.closest('[data-action]');" +
:    "     if(!target) return;" +
:    "     const action = target.getAttribute('data-action');" +
:    "     if(action === 'close') {" +
:    "        toast.close();" +
:    "        return;" +
:    "     }" +
:    "     container.basisDispatchCustomEvent(container, {type:action, detail: ''});" +
:    "  });"+
:    "  toast.setAttribute('data-toast-for','" + Id! + "');" +
:    "  document.body.appendChild(toast);" +
:    " }" +
:    " if(toast.opened) await toast.close();" +
:    " toast.classList.add(...'" + str(#getCssClass()) + "'.split(',').map(x => x.trim()));" +
:    " toast.setAttribute('placement','" + str(#getPlacementAttribute()) + "');"+
:    " toast.setAttribute('theme','" + str(#getThemeAttribute()) + "');"+
:    " toast.message='" + str(#getMessage()) + "';"+
:    " toast.duration=" + str(#getDuration()) + ";"+
:    " toast.innerHTML='" + str(buttons!) + "';"+
:    " await toast.open()"+
:    "})()"
    #getHTMLView().executeScript(script!)
    methodret #this!
  methodend
  rem /**
  rem  * Open the toast.
  rem  *
  rem  * If the toast is already opened then changes to the
  rem  * toast's placement , theme , duration and message will be ignored.
  rem  *
  rem  * @param message! The toast's message to show
  rem  *
  rem  * @return BBjToast
  rem */
  method public BBjToast open(BBjString message!)
    methodret #open(message!, #getDuration())
  methodend
  rem /**
  rem  * Open the toast.
  rem  *
  rem  * If the toast is already opened then changes to the
  rem  * toast's placement , theme , duration and message will be ignored.
  rem  *
  rem  * @return BBjToast
  rem */
  method public BBjToast open()
    methodret #open(#getMessage(), #getDuration())
  methodend
  rem /**
  rem  * Close the toast message.
  rem  *
  rem  * @return BBjToast
  rem */
  method public BBjToast close()
    script! = "" +
:    "(() => {" +
:    " const toast = document.querySelector('[data-toast-for=""" + #getId() + """]');" +
:    " if(toast) toast.opened = false;" +
:    "})()"
    #getHTMLView().executeScript(script!)
    methodret #this!
  methodend
  rem /**
  rem  * Set a toast event listener
  rem  *
  rem  * @param event! The toast event
  rem  * @param callback! The event callback
  rem  */
  method public void setCallback(BBjString event!, String callback!)
    #startEventsProcessing()
    BBjAPI().setCustomEventCallback(str(#this!) + str(event!), callback!)
  methodend
  rem /**
  rem  * Set a toast event listener
  rem  *
  rem  * @param event! The toast event
  rem  * @param callback! A class instance
  rem  * @param callback! The event method
  rem  */
  method public void setCallback(BBjString event!, CustomObject instance!, String method!)
    #startEventsProcessing()
    BBjAPI().setCustomEventCallback(str(#this!) + str(event!), instance!, method!)
  methodend
  rem /**
  rem  * Set a toast event listener
  rem  *
  rem  * @param event! The toast event
  rem  * @param callback! The event callback
  rem  */
  method public void setCallback(BBjNumber event!, String callback!)
    #setCallback(str(event!), callback!)
  methodend
  rem /**
  rem  * Set a toast event listener
  rem  *
  rem  * @param event! The toast event
  rem  * @param callback! A class instance
  rem  * @param callback! The event method
  rem  */
  method public void setCallback(BBjNumber event!, CustomObject instance!, String method!)
    #setCallback(str(event!), instance!, callback!)
  methodend
  rem /**
  rem  * Clear an event callback
  rem  *
  rem  * @param event! The toast event
  rem  */
  method public void clearCustomEventCallback(BBjString event!)
    BBjAPI().clearCustomEventCallback(str(#this!) + str(event!))
  methodend
  rem /**
  rem  * Clear an event callback
  rem  *
  rem  * @param event! The toast event
  rem  */
  method public void clearCustomEventCallback(BBjNumber event!)
    #clearCustomEventCallback(str(event!))
  methodend
  rem /**
  rem  * Resolve the placement constant as an string attribute
  rem  *
  rem  * @return BBjString The placement attribute
  rem  */
  method protected BBjString getPlacementAttribute()
    switch #Placement!
      case BBjToast.PLACEMENT_TOP_LEFT
        methodret "top-left"
      case BBjToast.PLACEMENT_TOP
        methodret "top"
      case BBjToast.PLACEMENT_TOP_RIGHT
        methodret "top-right"
      case BBjToast.PLACEMENT_BOTTOM_LEFT
        methodret "bottom-left"
      case BBjToast.PLACEMENT_BOTTOM_RIGHT
        methodret "bottom-right"
      case default
        methodret "bottom"
    swend
  methodend
  rem /**
  rem  * Resolve the theme constant as a string attribute
  rem  *
  rem  * @return BBjString The theme attribute
  rem  */
  method protected BBjString getThemeAttribute()
    switch #Theme!
      case BBjToast.THEME_PRIMARY
        methodret "primary"
      case BBjToast.THEME_SUCCESS
        methodret "success"
      case BBjToast.THEME_WARNING
        methodret "warning"
      case BBjToast.THEME_DANGER
        methodret "danger"
      case BBjToast.THEME_INFO
        methodret "info"
      case default
        methodret "default"
    swend
  methodend
  rem /**
  rem  * Start listing to javascript events coming form the client
  rem  */
  method protected void startEventsProcessing()
    if(#EventProcessingStarted! = 1) methodret
    #getHTMLView().setCallback(BBjAPI.ON_NATIVE_JAVASCRIPT,#this!,"handleToastEvent")
    #EventProcessingStarted! = 1
  methodend
  rem /**
  rem  * Handle the toast client events.
  rem  *
  rem  * <b>IMPORTANT</b> This method is not meant to be part of the public API of the control
  rem  * @param ev! The Javascript event
  rem  *
  rem  * @ignore
  rem  */
  method public void handleToastEvent(BBjNativeJavaScriptEvent ev!)
    map! = ev!.getEventMap()
    type$ = str(map!.get("type"))
    detail$ = str(map!.get("detail"))
    payload! = new BBjToastEvent(#this!)
    switch type$
      case "bbj-opened"
        BBjAPI().postPriorityCustomEvent(str(#this!)+ str(BBjToast.ON_OPENED), payload!)
        break
      case "bbj-closed"
        BBjAPI().postPriorityCustomEvent(str(#this!)+str(BBjToast.ON_CLOSED), payload!)
        break
      case default
        BBjAPI().postPriorityCustomEvent(str(#this!) + type$, payload!)
        break
    swend
  methodend

classend
